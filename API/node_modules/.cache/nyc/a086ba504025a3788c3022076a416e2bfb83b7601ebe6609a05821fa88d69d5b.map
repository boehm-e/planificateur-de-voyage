{"version":3,"sources":["role.js"],"names":["Role","Bookshelf","Model","extend","tableName","hidden","update","body","realbody","_","pick","set","save","fetch","destroy","getAll","query","fetchAll","getById","id","where","role","errors","ROLE_NOT_FOUND","toJSON","create","require","module","exports","model"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAIA,IAAI,GAAGC,sBAAUC,KAAV,CAAgBC,MAAhB,CAAuB;AAC9BC,EAAAA,SAAS,EAAE,MADmB;AAE9BC,EAAAA,MAAM,EAAE,EAFsB;AAIxBC,EAAAA,MAJwB;AAAA;AAAA;AAAA,kDAIjBC,IAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpBC,cAAAA,QALoB,GAKTC,mBAAEC,IAAF,CAAOH,IAAP,EAAa,CAAC,WAAD,CAAb,CALS;AAO1B,mBAAKI,GAAL,CAASH,QAAT;AAP0B;AAAA,qBAQN,KAAKI,IAAL,EARM;;AAAA;AAAA;AAAA,mCAQOC,KARP;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAWb,KAAKC,OAAL,EAXa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAvB,EAaR;AACOC,EAAAA,MADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEkB,KAAKC,KAAL,CAAW,EAAX,EAAeC,QAAf,EAFlB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAIOC,EAAAA,OAJP;AAAA;AAAA;AAAA,mDAIeC,EAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKyB,KAAKH,KAAL,CAAW;AAACI,gBAAAA,KAAK,EAAE;AAACD,kBAAAA,EAAE,EAAFA;AAAD;AAAR,eAAX,EAA0BN,KAA1B,EALzB;;AAAA;AAKWQ,cAAAA,IALX;;AAAA,oBAOSA,IAAI,IAAI,IAPjB;AAAA;AAAA;AAAA;;AAAA,oBAQe,IAAIC,mBAAOC,cAAX,EARf;;AAAA;AAAA,gDAYYF,IAAI,CAACG,MAAL,EAZZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAcOC,EAAAA,MAdP;AAAA;AAAA;AAAA,mDAcclB,IAdd;AAAA;AAAA;AAAA;AAAA;AAAA;AAeWC,cAAAA,QAfX,GAesBC,mBAAEC,IAAF,CAAOH,IAAP,EAAa,CAAC,WAAD,CAAb,CAftB;AAAA;AAAA,qBAgB+B,IAAI,IAAJ,CAASC,QAAT,EAAmBI,IAAnB,EAhB/B;;AAAA;AAAA;AAAA,oCAgB0DC,KAhB1D;;AAAA;AAgBWQ,cAAAA,IAhBX;AAAA,gDAkBYA,IAAI,CAACG,MAAL,EAlBZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAoBcL,EApBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAsB6B,IAAI,IAAJ,CAAS;AAACA,gBAAAA,EAAE,EAAFA;AAAD,eAAT,EAAeL,OAAf,CAAuB;AAACY,gBAAAA,OAAO,EAAE;AAAV,eAAvB,CAtB7B;;AAAA;AAsBaZ,cAAAA,OAtBb;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gDAwBgB,KAxBhB;;AAAA;AAAA,gDA0BY,IA1BZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAbQ,CAAX;;AA2CAa,MAAM,CAACC,OAAP,GAAiB3B,sBAAU4B,KAAV,CAAgB,MAAhB,EAAwB7B,IAAxB,CAAjB","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/models","sourcesContent":["import _         from 'lodash';\nimport User      from './user';\nimport Bookshelf from '../config/bookshelf';\nimport errors    from '../helpers/errors';\n\nvar Role = Bookshelf.Model.extend({\n    tableName: 'role',\n    hidden: [],\n\n    async update(body) {\n        const realbody = _.pick(body, ['authority']);\n\n        this.set(realbody);\n        return await (await this.save()).fetch();\n    },\n    async delete() {\n        return await this.destroy();\n    }\n}, {\n    async getAll() {\n        return await this.query({}).fetchAll();\n    },\n    async getById(id) {\n        const role =  await this.query({where: {id}}).fetch();\n\n        if (role == null) {\n            throw new errors.ROLE_NOT_FOUND();\n            return false;\n        }\n\n        return role.toJSON();\n    },\n    async create(body) {\n        const realbody = _.pick(body, ['authority']);\n        const role = await (await new this(realbody).save()).fetch();\n\n        return role.toJSON();\n    },\n    async delete(id) {\n        try {\n            var destroy = await new this({id}).destroy({require: true});\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n});\n\nmodule.exports = Bookshelf.model('Role', Role);\n"]}