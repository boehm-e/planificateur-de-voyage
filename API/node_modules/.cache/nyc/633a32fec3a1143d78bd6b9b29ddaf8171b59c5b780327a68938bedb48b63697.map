{"version":3,"sources":["auth.js"],"names":["login","req","res","next","body","email","password","User","find","user","token","jwt","encode","securityConfig","jwtSecret","name","error","code","message","log","warn","status","json","auth","setHeader","JSON","stringify","end","authorizeFnList","fnList","fn","authorizeAdmin","role","authorizeSelfAndAdmin","id","parseInt","params"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/controllers","sourcesContent":["import jwt            from 'jwt-simple';\nimport securityConfig from '../config/security';\nimport User           from '../models/user';\n\nconst login = async (req, res, next) => {\n    const {email, password} = req.body;\n\n    try {\n        var user = await User.find(email, password);\n        var token = jwt.encode(user, securityConfig.jwtSecret);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == \"INVALID_PASSWORD\"\n            || err.name == \"WRONG_PASSWORD_OR_EMAIL\") {\n            const error = {\n                code: 401,\n                message: `[Unauthorized]\\nLogin failed. Wrong email / password combination.`\n            };\n\n            req.log.warn(error);\n            return res.status(401).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json({...user, token: `JWT ${token}`});\n};\n\nconst auth = (req, res, next) => {\n    res.setHeader(\"X-Forwarded-User\", JSON.stringify(req.user));\n\n    return res.status(200).end('OK');\n};\n\nconst authorizeFnList = (fnList, {code, message} = {code: 401, message: \"Unauthorized !\"}) => async (req, res, next) => {\n    for (let fn of fnList) {\n        if (await fn(req)) {\n            return next();\n        }\n    }\n\n    const error = {\n        code,\n        message\n    };\n\n    req.log.warn(error);\n    return res.status(code).json(error);\n};\n\nconst authorizeAdmin  = authorizeFnList([\n    req => req.user.role == \"ADMIN\"\n], {code: 403, message: `[Forbidden]\\nOnly admin can use this route.`});\n\nconst authorizeSelfAndAdmin = authorizeFnList([\n    req => req.user.role == \"ADMIN\",\n    req => req.user.id === parseInt(req.params.id)\n], {code: 403, message: `[Forbidden]\\nOnly admin or self can use this route.`});\n\n\n\nexport default {login, auth, authorizeFnList, authorizeSelfAndAdmin, authorizeAdmin};\n"]}