{"version":3,"sources":["event.js"],"names":["Event","Bookshelf","Model","extend","tableName","idAttribute","hidden","user","belongsTo","atendees","hasMany","update","body","realbody","_","pick","set","save","withRelated","fetch","destroy","getAll","query","fetchAll","eventList","map","event","toJSON","fmt","getByUser","user_id","knex","raw","rawResult","userEventsIds","o","id","where","events","getById","errors","EVENT_NOT_FOUND","create","e","require","module","exports","model"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/models","sourcesContent":["import _            from 'lodash';\nimport User         from './user';\nimport EventAtendee from './eventAtendee';\nimport Bookshelf    from '../config/bookshelf';\nimport errors       from '../helpers/errors';\nimport fmt          from '../helpers/formatters';\n\nvar Event = Bookshelf.Model.extend({\n    tableName: 'event',\n    idAttribute: 'id',\n    hidden: [],\n\n    user() {\n        return this.belongsTo('User', 'user_id');\n    },\n\n    atendees() {\n        return this.hasMany('EventAtendee');\n    },\n\n    async update(body) {\n        const realbody = _.pick(body, ['name', 'start', 'end', 'user_id', 'canceled']);\n\n        this.set(realbody);\n        return await (await this.save()).fetch({withRelated: ['user', 'user.role', 'atendees', 'atendees.user']});\n    },\n\n    async delete() {\n        return await this.destroy();\n    }\n}, {\n    async getAll() {\n        const eventList = await this.query({}).fetchAll({withRelated: ['user', 'user.role', 'atendees', 'atendees.user', 'atendees.user.role']});\n\n        return eventList\n            .map(event => event.toJSON())\n            .map(fmt.event);\n    },\n\n    async getByUser(user_id) { // there must be a cleaner way to do that\n        const rawResult = await Bookshelf.knex.raw(\n            `SELECT event.id FROM event LEFT JOIN event_atendees ON event_atendees.event_id = event.id  WHERE event.user_id = ? OR event_atendees.user_id = ?`,\n            [user_id, user_id]\n        );\n        const userEventsIds = rawResult[0].map(o => o.id);\n        const events = await this\n              .where('id', 'in', userEventsIds)\n              .fetchAll({withRelated: ['user', 'user.role', 'atendees', 'atendees.user', 'atendees.user.role']});\n\n        return events\n            .map(event => event.toJSON())\n            .map(fmt.event);\n\n    },\n\n    async getById(id) {\n        const event =  await this.where({id}).fetch({withRelated: ['user', 'user.role', 'atendees', 'atendees.user', 'atendees.user.role']});\n\n        if (event == null) {\n            throw new errors.EVENT_NOT_FOUND();\n            return false;\n        }\n\n        return fmt.event(event.toJSON());\n    },\n    async create(body) {\n        const realbody = _.pick(body, ['name', 'start', 'end', 'user_id', 'canceled']);\n        const e = (await new this(realbody).save()).toJSON();\n        const event = await this.where({id: e.id}).fetch({withRelated: ['user', 'user.role', 'atendees', 'atendees.user']});\n\n        return fmt.event(event.toJSON());\n    },\n    async delete(id) {\n        try {\n            var destroy = await new this({id}).destroy({require: true});\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n});\n\nmodule.exports = Bookshelf.model('Event', Event);\n"]}