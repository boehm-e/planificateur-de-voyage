{"version":3,"sources":["eventAtendee.js"],"names":["EventAtendee","Bookshelf","Model","extend","tableName","idAttribute","hidden","user","belongsTo","event","destroy","create","body","realbody","_","pick","save","e","toJSON","where","id","fetch","withRelated","invitation","getPendingByUser","user_id","accepted","fetchAll","then","invits","Promise","all","map","invit","related","invitations","require","module","exports","model"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/models","sourcesContent":["import _         from 'lodash';\nimport User      from './user';\nimport Event     from './event';\nimport Bookshelf from '../config/bookshelf';\nimport errors    from '../helpers/errors';\nimport fmt       from '../helpers/formatters';\n\nvar EventAtendee = Bookshelf.Model.extend({\n    tableName: 'event_atendees',\n    idAttribute: 'id',\n    hidden: [],\n\n    user() {\n        return this.belongsTo('User', 'user_id');\n    },\n\n    event() {\n        return this.belongsTo('Event', 'event_id');\n    },\n\n    async delete() {\n        return await this.destroy();\n    }\n}, {\n    async create(body) {\n        const realbody = _.pick(body, ['event_id', 'user_id', 'accepted']);\n        const e = (await new this(realbody).save()).toJSON();\n        const invitation = await this.where({id: e.id}).fetch({withRelated: ['user', 'user.role']});\n\n        return invitation.toJSON();\n    },\n\n    async getPendingByUser(user_id) {\n        const invitations = await this\n              .where({user_id, accepted: null})\n        //    .fetchAll({withRealted: ['event']});\n              .fetchAll() // BUG : withRelated is not fetching events, need to do it manually\n              .then(async invits => {\n                  await Promise.all(invits.map(invit => invit.related('event').fetch()));\n                  return invits;\n              });\n\n        return invitations.toJSON();\n    },\n\n    async delete(id) {\n        try {\n            var destroy = await new this({id}).destroy({require: true});\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n});\n\nmodule.exports = Bookshelf.model('EventAtendee', EventAtendee);\n"]}