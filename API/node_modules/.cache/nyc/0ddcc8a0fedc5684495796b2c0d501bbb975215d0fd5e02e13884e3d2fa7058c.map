{"version":3,"sources":["user.js"],"names":["SALT_ROUNDS","User","Bookshelf","Model","extend","tableName","idAttribute","hidden","role","belongsTo","group_members","hasMany","GroupMember","event_members","EventAtendee","group","Group","update","body","realbody","_","pick","password","bcrypt","hash","role_id","save","patch","_user","fetch","withRelated","updatedUser","fmt","user","toJSON","destroy","getAll","query","fetchAll","usersList","map","getById","id","where","errors","USER_NOT_FOUND","getByEmail","email","getRefById","Object","keys","length","find","EMAIL_PASSWORD_REQUIRED","WRONG_PASSWORD_OR_EMAIL","compare","get","passwordMatch","INVALID_PASSWORD","create","require","module","exports","model"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/models","sourcesContent":["import _            from 'lodash';\nimport bcrypt       from 'bcrypt';\nimport Role         from './role';\nimport EventAtendee from './eventAtendee';\nimport GroupMember  from './groupMember';\nimport Group        from './group';\nimport Bookshelf    from '../config/bookshelf';\nimport errors       from '../helpers/errors';\nimport fmt          from '../helpers/formatters';\n\nconst SALT_ROUNDS = 10;\n\nvar User = Bookshelf.Model.extend({\n    tableName: 'user',\n    idAttribute: 'id',\n    hidden: ['password'],\n\n    role() {\n        return this.belongsTo('Role', 'role_id');\n    },\n\n    group_members() {\n        return this.hasMany(GroupMember, 'user_id');\n    },\n\n    event_members() {\n        return this.hasMany(EventAtendee, 'user_id');\n    },\n\n    group() {\n        return this.hasMany(Group, 'user_id');\n    },\n\n    async update(body) {\n        const realbody = _.pick(body, ['email', 'password']);\n\n        if (realbody.password) {\n            realbody.password = await bcrypt.hash(realbody.password, SALT_ROUNDS);\n        }\n\n        if (body.role) {\n            realbody.role_id = body.role;\n        }\n\n        const _user = await this.save(realbody, {patch: true});\n        const updatedUser = await _user.fetch({withRelated: ['role']});\n\n        return fmt.user(updatedUser.toJSON());\n    },\n    async delete() {\n        return await this.destroy();\n    }\n}, {\n    async getAll() {\n        const usersList = await this.query({}).fetchAll({withRelated: ['role']});\n\n        return usersList\n              .map(user => user.toJSON())\n              .map(fmt.user);\n    },\n    async getById(id) {\n        const user =  await this.where({id}).fetch({withRelated: ['role']});\n\n        if (user == null) {\n            throw new errors.USER_NOT_FOUND();\n            return false;\n        }\n\n        return fmt.user(user.toJSON());\n    },\n    async getByEmail(email) {\n        const user =  await this.where({email}).fetch({withRelated: ['role']});\n\n        if (user == null) {\n            throw new errors.USER_NOT_FOUND();\n            return false;\n        }\n\n        return fmt.user(user.toJSON());\n    },\n    async getRefById(id) {\n        const user =  await this.where({id}).fetch();\n\n        if (user == null || Object.keys(user.toJSON()).length == 0) {\n            throw new errors.USER_NOT_FOUND();\n            return false;\n        }\n\n        return user;\n    },\n    async find(email, password) {\n        if (!email || !password) {\n            throw new errors.EMAIL_PASSWORD_REQUIRED();\n            return false;\n        }\n\n        const user = await new this({ email }).fetch({withRelated: ['role']});\n\n\t      if (user == null) {\n\t          throw new errors.WRONG_PASSWORD_OR_EMAIL();\n\t      }\n\n        const passwordMatch = await bcrypt.compare(password, user.get('password'));\n\n        if (!passwordMatch) {\n            throw new errors.INVALID_PASSWORD();\n        } else {\n            return fmt.user(user.toJSON());\n        }\n    },\n    async create(body) {\n        const realbody = _.pick(body, ['email', 'password']);\n\n        realbody.password = await bcrypt.hash(realbody.password, SALT_ROUNDS);\n\n        const user = await (await new this(realbody).save()).fetch({withRelated: ['role']});\n\n        return fmt.user(user.toJSON());\n    },\n    async delete(id) {\n        try {\n            var destroy = await new this({id}).destroy({require: true});\n        } catch (e) {\n            return false;\n        }\n        return true;\n    }\n});\n\nmodule.exports = Bookshelf.model('User', User);\n"]}