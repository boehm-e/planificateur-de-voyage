{"version":3,"sources":["express-app.js"],"names":["app","AUTH_HEADER","customJWTExtractor","req","token","headers","match","cookies","JwtStrategy","passportJWT","Strategy","opts","jwtFromRequest","secretOrKey","securityConfig","jwtSecret","use","bodyParser","json","limit","extended","urlencoded","passport","initialize","jwt_payload","done","User","getById","id","user","message","res","next","header","origin"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,GAAG,GAAI,0BAAb,C,CAGA;;AACA,IAAMC,WAAW,GAAG,eAApB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,GAAG,EAAI;AAC9B,MAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAID,GAAG,CAACE,OAAJ,CAAYJ,WAAZ,CAAJ,EAA8B;AAC1BG,IAAAA,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAYJ,WAAZ,EAAyBK,KAAzB,CAA+B,eAA/B,EAAgD,CAAhD,CAAR,CAD0B,CACkC;AAC/D,GAFD,MAEO,IAAIH,GAAG,CAACI,OAAR,EAAiB;AACpBH,IAAAA,KAAK,GAAGD,GAAG,CAACI,OAAJ,CAAY,KAAZ,CAAR;AACH;;AAED,SAAOH,KAAP;AACH,CAVD;;AAeA,IAAMI,WAAW,GAAGC,wBAAYC,QAAhC;AACA,IAAMC,IAAI,GAAG;AACT;AACAC,EAAAA,cAAc,EAAEV,kBAFP;AAGTW,EAAAA,WAAW,EAAEC,qBAAeC;AAHnB,CAAb;AAOAf,GAAG,CAACgB,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AACAhB,GAAG,CAACgB,GAAJ,CAAQ,+BAAR;AACAhB,GAAG,CAACgB,GAAJ,CAAQC,uBAAWC,IAAX,CAAgB;AAACC,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAhB,CAAR;AACApB,GAAG,CAACgB,GAAJ,CAAQC,uBAAWI,UAAX,CAAsB;AAACF,EAAAA,KAAK,EAAE,MAAR;AAAgBC,EAAAA,QAAQ,EAAE;AAA1B,CAAtB,CAAR,E,CAEA;;AACApB,GAAG,CAACgB,GAAJ,CAAQM,qBAASC,UAAT,EAAR;;AACAD,qBAASN,GAAT,CAAa,IAAIR,WAAJ,CAAgBG,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB,iBAAOa,WAAP,EAAoBC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAERC,iBAAKC,OAAL,CAAaH,WAAW,CAACI,EAAzB,CAFQ;;AAAA;AAErBC,YAAAA,IAFqB;AAG3BJ,YAAAA,IAAI,CAAC,IAAD,EAAOI,IAAP,CAAJ;AAH2B;AAAA;;AAAA;AAAA;AAAA;AAK3BJ,YAAAA,IAAI,CAAC,IAAD,EAAO,KAAP,EAAc;AAAEK,cAAAA,OAAO,EAAE;AAAX,aAAd,CAAJ;;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,IAAb;;AAUA9B,GAAG,CAACgB,GAAJ,CAAQ,UAACb,GAAD,EAAM4B,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,EAAAA,GAAG,CAACE,MAAJ,CAAW,kCAAX,EAA+C,IAA/C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,6BAAX,EAA0C9B,GAAG,CAACE,OAAJ,CAAY6B,MAAtD;AACAH,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,qBAA3C;AACAF,EAAAA,GAAG,CAACE,MAAJ,CAAW,8BAAX,EAA2C,gEAA3C;AAEAD,EAAAA,IAAI;AACL,CAPD;eAUehC,G","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/config","sourcesContent":["import express        from 'express';\nimport passport       from 'passport';\nimport passportJWT    from 'passport-jwt';\nimport bodyParser     from 'body-parser';\nimport logger         from 'morgan';\nimport cookieParser   from 'cookie-parser';\nimport path           from 'path';\nimport securityConfig from './security';\nimport User           from '../models/user';\n\nconst app\t = express();\n\n\n// Extract JWT from header OR cookie\nconst AUTH_HEADER = 'authorization';\n\nconst customJWTExtractor = req => {\n    let token = null;\n\n    if (req.headers[AUTH_HEADER]) {\n        token = req.headers[AUTH_HEADER].match(/(\\S+)\\s+(\\S+)/)[2]; // remove 'JWT' prefix\n    } else if (req.cookies) {\n        token = req.cookies['jwt'];\n    }\n\n    return token;\n};\n\n\n\n\nconst JwtStrategy = passportJWT.Strategy;\nconst opts = {\n    // jwtFromRequest: passportJWT.ExtractJwt.fromAuthHeaderWithScheme(\"jwt\"),\n    jwtFromRequest: customJWTExtractor,\n    secretOrKey: securityConfig.jwtSecret\n};\n\n\napp.use(logger('dev'));\napp.use(cookieParser());\napp.use(bodyParser.json({limit: '50mb', extended: true}));\napp.use(bodyParser.urlencoded({limit: '50mb', extended: true }));\n\n// init passport\napp.use(passport.initialize());\npassport.use(new JwtStrategy(opts, async (jwt_payload, done) => {\n    try {\n        const user = await User.getById(jwt_payload.id);\n        done(null, user);\n    } catch (err) {\n        done(null, false, { message: 'this JWT is not valid anymore' });\n    }\n}));\n\n\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Credentials', true);\n  res.header('Access-Control-Allow-Origin', req.headers.origin);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');\n  res.header('Access-Control-Allow-Headers', 'X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');\n\n  next();\n});\n\n\nexport default app;\n"]}