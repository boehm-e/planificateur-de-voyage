{"version":3,"sources":["users.js"],"names":["joiSchema","Joi","object","keys","email","string","minDomainSegments","required","password","min","getAll","req","res","next","User","users","log","error","json","create","body","user","code","message","warn","status","getById","id","params","name","updateById","parseInt","update","role","getRefById","newUser","removeById","listEvents","user_id","Event","getByUser","eventList","listGroups","Group","groupList","listNotifications","userService","getNotifications","notifications","setEventVisibility","event_id","group_ids","groups_ids","user_ids","users_ids","groupVisibilities","map","group_id","visible_to_group_id","userVisibilities","visible_to_user_id","objectsToInsert","Bookshelf","knex","insert","visibilities","eventService","event","calendar","viewer_id","buildCalendar"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/controllers","sourcesContent":["import Joi                 from '@hapi/joi';\nimport Bookshelf           from '../config/bookshelf';\nimport User                from '../models/user';\nimport Role                from '../models/role';\nimport Event               from '../models/event';\nimport eventService        from '../services/events';\nimport userService         from '../services/users';\nimport Group               from '../models/group';\nimport UserEventVisibility from '../models/userEventVisibility';\n\nconst joiSchema = Joi.object().keys({\n    email: Joi.string().email({ minDomainSegments: 2 }).required(),\n    password: Joi.string().min(3).required()\n});\n\n\nconst getAll = async (req, res, next) => {\n    try {\n        var users = await User.getAll();\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(users);\n};\n\nconst create = async (req, res, next) => {\n    try {\n        var user = await User.create(req.body);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.code == 'ER_DUP_ENTRY') {\n            const error = {\n                code: 409,\n                message: `[Conflict]\\nEmail ${req.body.email} already taken.`\n            };\n            req.log.warn(err);\n            return res.status(error.code).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(user);\n};\n\nconst getById = async (req, res, next) => {\n    const id = req.params.id;\n\n    try {\n        var user = await User.getById(id);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'USER_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nUser with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(error.code).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(user);\n};\n\nconst updateById = async (req, res, next) => {\n    const id = parseInt(req.params.id);\n    const update = req.body;\n\n    if (update.role && req.user.role !== \"ADMIN\") { /* only admin can modify role */\n        const error = {\n            code: 401,\n            message: `[Unauthorized]\\nOnly admin can change a user's role.`\n        };\n\n        req.log.warn(error);\n        return res.status(401).json(error);\n    }\n\n    try {\n        var user = await User.getRefById(id);\n        var newUser = await user.update(update);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'USER_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nUser with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(404).json(error);\n        } else if (err.code == 'ER_NO_REFERENCED_ROW_2') {\n            const error = {\n                code: 400,\n                message: `[Bad Request]\\nCannot update user's role because role with id ${update.role} does not exists.`\n            };\n\n            req.log.warn(error);\n            return res.status(400).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(newUser);\n};\n\n\nconst removeById = async (req, res, next) => {\n    const id = req.params.id;\n\n    try {\n        var user = await User.getById(id);\n        await User.delete(id);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'USER_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nUser with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(404).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(user);\n};\n\nconst listEvents = async (req, res, next) => {\n    const user_id = req.params.id;\n\n    try {\n        var eventList = await Event.getByUser(user_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(eventList);\n};\n\nconst listGroups = async (req, res, next) => {\n    const user_id = req.params.id;\n\n    try {\n        var groupList = await Group.getByUser(user_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(groupList);\n};\n\nconst listNotifications = async (req, res, next) => {\n    const user_id = req.params.id;\n    try {\n        var notifications = await userService.getNotifications(user_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(notifications);\n};\n\nconst setEventVisibility = async (req, res, next) => {\n    const user_id   = req.params.id;\n    const event_id  = req.params.event_id;\n    const group_ids = req.body.groups_ids;\n    const user_ids  = req.body.users_ids;\n\n    const groupVisibilities = group_ids.map(group_id => ({\n        event_id,\n        user_id,\n        visible_to_group_id: group_id\n    }));\n\n    const userVisibilities = user_ids.map(visible_to_user_id => ({\n        event_id,\n        user_id,\n        visible_to_user_id\n    }));\n\n    const objectsToInsert = [...groupVisibilities, ...userVisibilities];\n    // should be moved in a service\n    const visibilities = await Bookshelf.knex('user_event_visibility').insert(objectsToInsert);\n    const event = await eventService.getById(event_id);\n\n    return res.json(event);\n};\n\nconst calendar = async (req, res, next) => {\n    const user_id = parseInt(req.params.id);\n    const viewer_id = req.user.id;\n\n    const eventList = await eventService.buildCalendar(user_id, viewer_id);\n\n    return res.json(eventList);\n};\n\nexport default {\n    getAll,\n    joiSchema,\n    create,\n    getById,\n    updateById,\n    removeById,\n    listEvents,\n    listGroups,\n    listNotifications,\n    setEventVisibility,\n    calendar\n};\n"]}