{"version":3,"sources":["roles.js"],"names":["joiSchema","Joi","object","keys","authority","string","alphanum","min","required","getAll","req","res","next","Role","roles","log","error","json","create","body","role","getById","id","params","name","code","message","warn","status","removeById"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/controllers","sourcesContent":["import Joi  from '@hapi/joi';\nimport Role from '../models/role';\n\nconst joiSchema = Joi.object().keys({\n    authority: Joi.string().alphanum().min(3).required()\n});\n\nconst getAll = async (req, res, next) => {\n    try {\n        var roles = await Role.getAll();\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(roles);\n};\n\nconst create = async (req, res, next) => {\n    try {\n        var role = await Role.create(req.body);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(role);\n};\n\nconst getById = async (req, res, next) => {\n    const id = req.params.id;\n\n    try {\n        var role = await Role.getById(id);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'ROLE_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nRole with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(404).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(role);\n};\n\n\nconst removeById = async (req, res, next) => {\n    const id = req.params.id;\n\n    try {\n        var role = await Role.getById(id);\n        await Role.delete(id);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'ROLE_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nRole with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(404).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    return res.json(role);\n};\n\nexport default {getAll, joiSchema, create, getById, removeById};\n"]}