{"version":3,"sources":["groups.js"],"names":["joiSchema","Joi","object","keys","name","string","min","required","description","getAll","req","res","next","groupService","events","log","error","json","create","body","user_id","user","id","group","addGroupToReq","params","getById","code","message","warn","status","_","inviteUsers","usersEmails","group_id","Promise","all","map","user_email","inviteUserByEmail","respondToInvitation","parseInt","accept","members","u","includes","end","find","invitation_id","deleteGroup"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/controllers","sourcesContent":["import Joi          from '@hapi/joi';\nimport groupService from '../services/groups';\n\nconst joiSchema = Joi.object().keys({\n    name: Joi.string().min(3).required(),\n    description: Joi.string().min(3).required()\n});\n\nconst getAll = async (req, res, next) => {\n    try {\n        var events = await groupService.getAll();\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(events);\n};\n\nconst create = async (req, res, next) => {\n    const body = {\n        name: req.body.name,\n        description: req.body.description,\n        user_id: req.user.id\n    };\n\n    try {\n        var group = await groupService.create(body);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(group);\n};\n\nconst addGroupToReq = async (req, res, next) => {\n    const id = req.params.id;\n\n    try {\n        var group = await groupService.getById(id);\n    } catch (err) {\n        /* istanbul ignore else  */\n        if (err.name == 'GROUP_NOT_FOUND') {\n            const error = {\n                code: 404,\n                message: `[Not Found]\\nGroup with id ${id} not found.`\n            };\n\n            req.log.warn(error);\n            return res.status(404).json(error);\n        } else {\n            req.log.error(err);\n            return next(err);\n        }\n    }\n\n    req.group = group;\n\n    return next();\n};\n\nconst getById = async (req, res, next) => {\n    if (!req.group) {\n        await addGroupToReq(req, res, _ => getById(req, res));\n    }\n\n    return res.json(req.group);\n};\n\nconst inviteUsers = async (req, res, next) => {\n    const usersEmails = req.body;\n    const group_id = req.params.id;\n\n    try {\n        await Promise.all(\n            usersEmails.map(user_email => groupService.inviteUserByEmail(group_id, user_email))\n        );\n\n        var group = await groupService.getById(group_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(group);\n};\n\nconst respondToInvitation  = async (req, res, next) => {\n    const group_id = parseInt(req.params.id);\n    const user_id = parseInt(req.params.user_id);\n    const accept = req.body.accept;\n\n    try {\n        var group = await groupService.getById(group_id);\n\n        if (!group.members.map(u => u.id).includes(user_id)) {\n            return res.status(404).end(`No invitation to group number ${group.id} for user ${user_id}`);\n        }\n\n        const { invitation_id } = group.members.find(u => u.id == user_id);\n        await groupService.respondToInvitation(invitation_id, accept);\n\n        group = await groupService.getById(group_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(group);\n};\n\nconst deleteGroup  = async (req, res, next) => {\n    const group_id = req.params.id;\n\n    try {\n        await groupService.deleteGroup(group_id);\n        var group = await groupService.getById(group_id);\n    } catch (err) {\n        req.log.error(err);\n        return next(err);\n    }\n\n    return res.json(group);\n};\n\nexport default {getAll, create, addGroupToReq, getById, inviteUsers, respondToInvitation, deleteGroup, joiSchema};\n"]}