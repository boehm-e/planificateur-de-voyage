{"version":3,"sources":["events.js"],"names":["getAll","Event","create","name","start","end","user_id","getById","event_id","inviteUserById","EventAtendee","inviteUserByEmail","user_email","User","getByEmail","user","id","respondToInvitation","accepted","save","patch","cancel","canceled","buildCalendar","viewer_id","Bookshelf","knex","raw","rawResult","eventsVisibility","event","allowed_user","allowed_group","visible_to_group_id","visible_to_user_id","index","findIndex","o","push","allowed_users","allowed_groups","userEventsIds","map","where","fetchAll","withRelated","userEvents","toJSON","fmt","filter","atendees","find","u","viewer","Group","getByUser","_viewerGroups","viewerGroups","group","members","viewerGroupsIds","calendar","vr","visibility","includes","some","gr_id"],"mappings":"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","sourceRoot":"/home/erwan/Desktop/ETNA/MOBI/mobi_appli/API/src/services","sourcesContent":["import Bookshelf    from '../config/bookshelf';\nimport Event        from '../models/event';\nimport Group        from '../models/group';\nimport User         from '../models/user';\nimport EventAtendee from '../models/eventAtendee';\nimport fmt          from '../helpers/formatters';\n\nconst getAll = async () => await Event.getAll();\n\nconst create = async ({name, start, end, user_id}) => await Event.create({ name, start, end, user_id });\n\nconst getById = async (event_id) => await Event.getById(event_id);\n\nconst inviteUserById = async (event_id, user_id) => await EventAtendee.create({event_id, user_id});\n\nconst inviteUserByEmail = async (event_id, user_email) => {\n    const user = await User.getByEmail(user_email);\n    return await inviteUserById(event_id, user.id);\n};\n\nconst respondToInvitation = async (id, accepted) => await new EventAtendee({id}).save({accepted}, {patch: true});\n\nconst cancel = async (id) => await new Event({id}).save({canceled: true}, {patch: true});\n\nconst buildCalendar = async (user_id, viewer_id) => {\n    const rawResult = await Bookshelf.knex.raw(`\nSELECT event.*, user_event_visibility.visible_to_user_id, user_event_visibility.visible_to_group_id\nFROM event\nLEFT JOIN event_atendees ON event_atendees.event_id = event.id\nLEFT JOIN user_event_visibility ON user_event_visibility.event_id = event.id\nWHERE event.canceled = 0\n  AND (event.user_id = ? OR event_atendees.user_id = ?)\n  AND (user_event_visibility.user_id = ? OR user_event_visibility.user_id IS NULL)\n`, [user_id, user_id, user_id]);\n\n    /*\n     * on récupère tous les événements dont l'utilisateur fait parti et\n     * on liste les personnes ou les groupes qui ont le droit de voir que\n     * l'utilisateur participe à cet événement\n     */\n\n    const eventsVisibility = [];\n    for (let event of rawResult[0]) { // can be done using reduce\n        const event_id = event.id;\n        let allowed_user = null;\n        let allowed_group = null;\n\n        if (event.visible_to_group_id) {\n            allowed_group = event.visible_to_group_id;\n        } else if (event.visible_to_user_id) {\n            allowed_user = event.visible_to_user_id;\n        }\n\n        const index = eventsVisibility.findIndex(o => o.event_id == event_id);\n\n        if (index < 0) {\n            eventsVisibility.push({\n                event_id,\n                allowed_users: allowed_user ? [allowed_user] : [],\n                allowed_groups: allowed_group ? [allowed_group] : []\n            });\n        } else {\n            if (allowed_user) eventsVisibility[index].allowed_users.push(allowed_user);\n            if (allowed_group) eventsVisibility[index].allowed_groups.push(allowed_group);\n        }\n    }\n\n    const userEventsIds = eventsVisibility.map(o => o.event_id);\n    let userEvents = await Event\n          .where('id', 'in', userEventsIds)\n        .fetchAll({withRelated: ['user', 'user.role', 'atendees', 'atendees.user', 'atendees.user.role']});\n\n    userEvents = userEvents\n        .map(event => event.toJSON())\n        .map(fmt.event);\n\n    /*\n     * On filtre les événements auxquels l'utilisateur n'a pas confirmé\n     * sa participation ou alors a refusé de participer\n     */\n\n    userEvents = userEvents\n        .filter(event => event.user.id == user_id\n                ? true\n                : event.atendees.find(u => u.id == user_id).accepted == true);\n\n\n    const viewer = await User.getById(viewer_id);\n    const _viewerGroups = await Group.getByUser(viewer_id);\n    const viewerGroups = _viewerGroups.filter(group => group.user.id == viewer_id\n                                              ? true\n                                              : group.members.find(u => u.id == viewer_id).accepted == true);\n    const viewerGroupsIds = viewerGroups.map(group => group.id);\n\n    const calendar = userEvents.filter(event => {\n        const vr = eventsVisibility.find(visibility => visibility.event_id == event.id);\n        /* We've found a visibility rule (set by the user)*/\n        if (vr) {\n            if (vr.allowed_users && vr.allowed_users.includes(viewer_id)) {\n                /* viewer is allowed to see the event*/\n                return true;\n            } else if (vr.allowed_groups && vr.allowed_groups.some(gr_id => viewerGroupsIds.includes(gr_id))) {\n                /* viewer is in a group that is allowed to see the event*/\n                return true;\n            }\n        }\n\n        /* viewer is invited to the event or the creator of the event */\n        if (event.user.id == viewer_id || event.atendees.map(u => u.id).includes(viewer_id)) {\n            return true;\n        } else {\n            return false;\n        }\n\n    });\n\n    return calendar;\n};\n\nexport default {getById, create, getAll, inviteUserById, inviteUserByEmail, respondToInvitation, cancel, buildCalendar};\n"]}